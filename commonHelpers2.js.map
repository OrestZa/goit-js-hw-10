{"version":3,"file":"commonHelpers2.js","sources":["../src/js/timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst daysValueEl = document.querySelector('[data-days]');\nconst hoursValueEl = document.querySelector('[data-hours]');\nconst minutesValueEl = document.querySelector('[data-minutes]');\nconst secondsValueEl = document.querySelector('[data-seconds]');\nconst startButtonEl = document.querySelector('[data-start]');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectFromUserDate = selectedDates[0];\n\n    if (selectFromUserDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'You must choose a future date',\n      });\n      startButtonEl.disabled = true;\n    } else {\n      startButtonEl.disabled = false;\n    }\n  },\n};\n\nconst methodFlatpicrk = flatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartButtonEl.addEventListener('click', function () {\n  const selectedDate = methodFlatpicrk.selectedDates[0];\n  const currentTime = Date.now();\n  let cutterTime = selectedDate - currentTime;\n\n  const intervalOfTime = setInterval(function () {\n    const { days, hours, minutes, seconds } = convertMs(cutterTime);\n\n    daysValueEl.textContent = days >= 0 ? addLeadingZero(days) : '00';\n    hoursValueEl.textContent = hours >= 0 ? addLeadingZero(hours) : '00';\n    minutesValueEl.textContent = minutes >= 0 ? addLeadingZero(minutes) : '00';\n    secondsValueEl.textContent = seconds >= 0 ? addLeadingZero(seconds) : '00';\n\n    if (cutterTime <= 0) {\n      clearInterval(intervalOfTime);\n      iziToast.success({\n        title: 'Success',\n        message: 'The countdown to the selected date has ended',\n      });\n    }\n\n    cutterTime -= 1000;\n  }, 1000);\n});\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nstartButtonEl.disabled = true;\n"],"names":["daysValueEl","hoursValueEl","minutesValueEl","secondsValueEl","startButtonEl","options","selectedDates","iziToast","methodFlatpicrk","flatpickr","convertMs","ms","days","hours","minutes","seconds","selectedDate","currentTime","cutterTime","intervalOfTime","addLeadingZero","value"],"mappings":"2FAKA,MAAMA,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAgB,SAAS,cAAc,cAAc,EAErDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACMA,EAAc,CAAC,EAEjB,IAAI,MAC3BC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,+BACjB,CAAO,EACDH,EAAc,SAAW,IAEzBA,EAAc,SAAW,EAE5B,CACH,EAEMI,EAAkBC,EAAU,mBAAoBJ,CAAO,EAE7D,SAASK,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAX,EAAc,iBAAiB,QAAS,UAAY,CAClD,MAAMY,EAAeR,EAAgB,cAAc,CAAC,EAC9CS,EAAc,KAAK,MACzB,IAAIC,EAAaF,EAAeC,EAEhC,MAAME,EAAiB,YAAY,UAAY,CAC7C,KAAM,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUQ,CAAU,EAE9DlB,EAAY,YAAcY,GAAQ,EAAIQ,EAAeR,CAAI,EAAI,KAC7DX,EAAa,YAAcY,GAAS,EAAIO,EAAeP,CAAK,EAAI,KAChEX,EAAe,YAAcY,GAAW,EAAIM,EAAeN,CAAO,EAAI,KACtEX,EAAe,YAAcY,GAAW,EAAIK,EAAeL,CAAO,EAAI,KAElEG,GAAc,IAChB,cAAcC,CAAc,EAC5BZ,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,8CACjB,CAAO,GAGHW,GAAc,GACf,EAAE,GAAI,CACT,CAAC,EAED,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEAjB,EAAc,SAAW"}